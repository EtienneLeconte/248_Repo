<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>publications</string>
			<key>host</key>
			<string>127.0.0.1</string>
			<key>kcid</key>
			<string>5430701237833564815</string>
			<key>name</key>
			<string>localhost</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8mb4</string>
			<key>contentFilterV2</key>
			<dict>
				<key>children</key>
				<array/>
				<key>filterClass</key>
				<string>groupNode</string>
				<key>isConjunction</key>
				<true/>
			</dict>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGBwpYJHZlcnNpb25ZJGFyY2hpdmVyVCR0
			b3BYJG9iamVjdHMSAAGGoF8QD05TS2V5ZWRBcmNoaXZlctEICVRk
			YXRhgAGoCwwXGBkaHiVVJG51bGzTDQ4PEBMWV05TLmtleXNaTlMu
			b2JqZWN0c1YkY2xhc3OiERKAAoADohQVgASABYAHVHR5cGVUcm93
			c18QHVNlbGVjdGlvbkRldGFpbFR5cGVOU0luZGV4U2V00hsPHB1c
			TlNSYW5nZUNvdW50EACABtIfICEiWiRjbGFzc25hbWVYJGNsYXNz
			ZXNaTlNJbmRleFNldKIjJFpOU0luZGV4U2V0WE5TT2JqZWN00h8g
			JidcTlNEaWN0aW9uYXJ5oiYkAAgAEQAaACQAKQAyADcASQBMAFEA
			UwBcAGIAaQBxAHwAgwCGAIgAigCNAI8AkQCTAJgAnQC9AMIAzwDR
			ANMA2ADjAOwA9wD6AQUBDgETASAAAAAAAAACAQAAAAAAAAAoAAAA
			AAAAAAAAAAAAAAABIw==
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {1227, 791}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>table</key>
			<string>most_profiting_authors</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>214</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string># CHALLENGE 3 

create table if not exists most_profiting_authors
select au_id as AUTHORS,sum(ADVANCE+AGG_ROYAL) as PROFIT
from aggroypertitle
group by AUTHORS
order by AUTHORS desc</string>
		<string>select au_id as AUTHORS,sum(ADVANCE+AGG_ROYAL) as PROFIT
from aggroypertitle
group by AUTHORS
order by AUTHORS desc
limit 3</string>
		<string>select au_id as AUTHORS,sum(ADVANCE+AGG_ROYAL) as PROFIT
from aggroypertitle
group by AUTHORS
order by AUTHORS
limit 3</string>
		<string>select au_id as AUTHORS,sum(ADVANCE+AGG_ROYAL) as PROFIT
from aggroypertitle
group by AUTHORS</string>
		<string>create temporary table publications.aggroypertitle
select title_id, au_id,ADVANCE,sum(ROYALTIES) as AGG_ROYAL
from roypersales
group by au_id,title_id,ADVANCE</string>
		<string>select title_id, au_id,ADVANCE,sum(ROYALTIES) as AGG_ROYAL
from roypersales
group by au_id,title_id,ADVANCE</string>
		<string>## STEP 2

select title_id, au_id, ADVANCE,sum(ROYALTIES) as AGG_ROYAL
from (
select titleauthor.title_id,titleauthor.au_id,titles.advance * titleauthor.royaltyper / 100 as ADVANCE,titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100 as ROYALTIES
from titleauthor
inner join titles on titleauthor.title_id=titles.title_id
inner join sales on titleauthor.title_id=sales.title_id
order by au_id) step1
group by au_id,title_id</string>
		<string>select title_id, au_id,advance,sum(ROYALTIES) as AGG_ROYAL
from roypersales
group by au_id,title_id</string>
		<string>select title_id, au_id,sum(ROYALTIES) as AGG_ROYAL
from roypersales
group by au_id,title_id</string>
		<string>select title_id, au_id, ADVANCE,sum(ROYALTIES) as AGG_ROYAL
from roypersales
group by au_id,title_id</string>
		<string># CHALLENGE 2 

create temporary table if not exist publications.roypersales
select titleauthor.title_id,titleauthor.au_id,titles.advance * titleauthor.royaltyper / 100 as ADVANCE,titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100 as ROYALTIES
from titleauthor
inner join titles on titleauthor.title_id=titles.title_id
inner join sales on titleauthor.title_id=sales.title_id
order by au_id</string>
		<string># CHALLENGE 2 

create temporary table if not exists publications.roypersales
select titleauthor.title_id,titleauthor.au_id,titles.advance * titleauthor.royaltyper / 100 as ADVANCE,titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100 as ROYALTIES
from titleauthor
inner join titles on titleauthor.title_id=titles.title_id
inner join sales on titleauthor.title_id=sales.title_id
order by au_id</string>
		<string># CHALLENGE 2 

create temporary table publications.roypersales
select titleauthor.title_id,titleauthor.au_id,titles.advance * titleauthor.royaltyper / 100 as ADVANCE,titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100 as ROYALTIES
from titleauthor
inner join titles on titleauthor.title_id=titles.title_id
inner join sales on titleauthor.title_id=sales.title_id
order by au_id</string>
		<string>select* from roypersales</string>
		<string>## STEP 3 

select AUTHORS,sum(PROFITPERTITLE) as PROFIT
from (
select au_id as AUTHORS,ADVANCE+AGG_ROYAL as PROFITPERTITLE
from (
select title_id, au_id, ADVANCE,sum(ROYALTIES) as AGG_ROYAL
from (
select titleauthor.title_id,titleauthor.au_id,titles.advance * titleauthor.royaltyper / 100 as ADVANCE,titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100 as ROYALTIES
from titleauthor
inner join titles on titleauthor.title_id=titles.title_id
inner join sales on titleauthor.title_id=sales.title_id
order by au_id) step1
group by au_id,title_id) step2) step3
group by AUTHORS
order by AUTHORS desc
limit 3</string>
		<string>## STEP 3 

select AUTHORS,sum(PROFITPERTITLE) as PROFIT
from (
select au_id as AUTHORS,ADVANCE+AGG_ROYAL as PROFITPERTITLE
from (
select title_id, au_id, ADVANCE,sum(ROYALTIES) as AGG_ROYAL
from (
select titleauthor.title_id,titleauthor.au_id,titles.advance * titleauthor.royaltyper / 100 as ADVANCE,titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100 as ROYALTIES
from titleauthor
inner join titles on titleauthor.title_id=titles.title_id
inner join sales on titleauthor.title_id=sales.title_id
order by au_id) step1
group by au_id,title_id) step2) step3
group by AUTHORS
order by AUTHORS desc</string>
		<string>## STEP 3 

select AUTHORS,sum(PROFITPERTITLE) as PROFIT
from (
select au_id as AUTHORS,ADVANCE+AGG_ROYAL as PROFITPERTITLE
from (
select title_id, au_id, ADVANCE,sum(ROYALTIES) as AGG_ROYAL
from (
select titleauthor.title_id,titleauthor.au_id,titles.advance * titleauthor.royaltyper / 100 as ADVANCE,titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100 as ROYALTIES
from titleauthor
inner join titles on titleauthor.title_id=titles.title_id
inner join sales on titleauthor.title_id=sales.title_id
order by au_id) step1
group by au_id,title_id) step2) step3
group by AUTHORS</string>
		<string>## STEP 3 

select AUTHORS,sum(PROFIT)
from (
select au_id as AUTHORS,ADVANCE+AGG_ROYAL as PROFIT
from (
select title_id, au_id, ADVANCE,sum(ROYALTIES) as AGG_ROYAL
from (
select titleauthor.title_id,titleauthor.au_id,titles.advance * titleauthor.royaltyper / 100 as ADVANCE,titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100 as ROYALTIES
from titleauthor
inner join titles on titleauthor.title_id=titles.title_id
inner join sales on titleauthor.title_id=sales.title_id
order by au_id) step1
group by au_id,title_id) step2) step3
group by AUTHORS</string>
		<string>## STEP 3 

select au_id,sum(PROFIT)
from (
select au_id as AUTHORS,ADVANCE+AGG_ROYAL as PROFIT
from (
select title_id, au_id, ADVANCE,sum(ROYALTIES) as AGG_ROYAL
from (
select titleauthor.title_id,titleauthor.au_id,titles.advance * titleauthor.royaltyper / 100 as ADVANCE,titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100 as ROYALTIES
from titleauthor
inner join titles on titleauthor.title_id=titles.title_id
inner join sales on titleauthor.title_id=sales.title_id
order by au_id) step1
group by au_id,title_id) step2) step3
group by au_id</string>
		<string>## STEP 3 

select au_id as AUTHORS,ADVANCE+AGG_ROYAL as PROFIT
from (
select title_id, au_id, ADVANCE,sum(ROYALTIES) as AGG_ROYAL
from (
select titleauthor.title_id,titleauthor.au_id,titles.advance * titleauthor.royaltyper / 100 as ADVANCE,titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100 as ROYALTIES
from titleauthor
inner join titles on titleauthor.title_id=titles.title_id
inner join sales on titleauthor.title_id=sales.title_id
order by au_id) step1
group by au_id,title_id) step2</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>8.0.21</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
